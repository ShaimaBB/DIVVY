<!DOCTYPE html>
<html lang="en">
<head>
  <title>DIVVY</title>
  <script src="https://cdn.tailwindcss.com"></script>
</head>
<body class="bg-gray-100 min-h-screen">
  <div class="container mx-auto p-6">
    <div class="bg-white p-8 rounded shadow-lg w-full max-w-lg mx-auto">
      <h1 class="text-2xl font-bold text-center mb-6">Split Amount</h1>
      
      <!-- Updated Group Info Section -->
      <div class="mb-6">
        <h2 class="text-lg font-semibold">Group: <%= group.name %></h2>
        <div class="text-gray-600 flex flex-wrap gap-2 mt-2" id="membersList">
          <% group.members.forEach((member) => { %>
            <div class="flex items-center bg-gray-100 px-3 py-1 rounded-full">
              <span class="mr-1"><%= member %></span>
              <% if (member !== user) { %>
                <form 
                  method="POST" 
                  action="/delete-member/<%= group._id %>"
                  class="delete-form"
                >
                  <input type="hidden" name="memberToDelete" value="<%= member %>">
                  <button 
                    type="button"
                    class="delete-member-btn p-1 text-red-500 hover:text-red-700 rounded-full hover:bg-red-100 ml-1 -mr-1"
                    aria-label="Delete member"
                  >
                    <svg class="w-4 h-4" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                      <path d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6M4 7h16m-10-4h4a1 1 0 011 1v2H9V4a1 1 0 011-1z"/>
                    </svg>
                  </button>
                </form>
              <% } %>
            </div>
          <% }); %>
        </div>
      </div>

      <!-- Amount Input -->
      <div class="mb-6">
        <label class="block text-gray-700 mb-2">Total Amount:</label>
        <input
          type="number"
          id="totalAmount"
          step="0.01"
          class="w-full p-2 border rounded"
          placeholder="Enter total amount"
          required
        />
      </div>

      <!-- Controls -->
      <div class="flex gap-4 mb-6">
        <button
          id="calculateButton"
          class="w-full bg-indigo-500 text-white py-2 px-4 rounded hover:bg-indigo-600"
        >
          Calculate Shares
        </button>
      </div>

      <!-- Results Section -->
      <div id="resultsSection" class="hidden">
        <div class="bg-blue-50 p-4 rounded mb-4">
          <h3 class="font-semibold mb-2">Summary:</h3>
          <p>Total Members: <span id="totalMembers"><%= group.members.length %></span></p>
          <p>Amount Per Person: $<span id="perPerson">0.00</span></p>
        </div>

        <h2 class="text-lg font-semibold mb-4">Payment Breakdown</h2>
        <ul id="resultsList" class="space-y-3"></ul>
      </div>
    </div>
  </div>

  <script>
    const groupId = "<%= group._id %>";
    const currentUser = "<%= user %>";

    // Delete Member Handling
    document.addEventListener("click", async (e) => {
      const deleteBtn = e.target.closest(".delete-member-btn");
      if (!deleteBtn) return;

      const form = deleteBtn.closest("form");
      const memberName = form.querySelector("[name=memberToDelete]").value;
      const memberElement = form.closest(".flex.items-center");
      
      deleteBtn.disabled = true;
      deleteBtn.innerHTML = `
        <svg class="animate-spin h-4 w-4" viewBox="0 0 24 24">
          <path fill="currentColor" d="M12,4V2A10,10 0 0,0 2,12H4A8,8 0 0,1 12,4Z"/>
        </svg>
      `;

      try {
        const response = await fetch(form.action, {
          method: "POST",
          headers: {
            "Content-Type": "application/x-www-form-urlencoded",
          },
          body: new URLSearchParams({
            memberToDelete: memberName
          })
        });
        
        const data = await response.json();
        if (!response.ok) throw new Error(data.error || "Deletion failed");

        // Remove from UI
        memberElement.remove();
        
        // Update total members count
        const totalMembersElement = document.getElementById('totalMembers');
        totalMembersElement.textContent = parseInt(totalMembersElement.textContent) - 1;

      } catch (error) {
        alert(`Delete failed: ${error.message}`);
      } finally {
        deleteBtn.disabled = false;
        deleteBtn.innerHTML = `
          <svg class="w-4 h-4" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
            <path d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6M4 7h16m-10-4h4a1 1 0 011 1v2H9V4a1 1 0 011-1z"/>
          </svg>
        `;
      }
    });

    document.getElementById('calculateButton').addEventListener('click', async () => {
      const totalInput = document.getElementById('totalAmount');
      const amount = parseFloat(totalInput.value);
      
      if (isNaN(amount) || amount <= 0) {
        alert("Please enter a valid positive number");
        totalInput.focus();
        return;
      }

      try {
        const response = await fetch(`/split-amount/${groupId}`, {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ totalAmount: amount })
        });

        // Verify JSON response
        const contentType = response.headers.get('content-type');
        if (!contentType || !contentType.includes('application/json')) {
          const text = await response.text();
          throw new Error(`Invalid response: ${text.slice(0, 50)}`);
        }

        const data = await response.json();
        
        if (!response.ok || !data.success) {
          throw new Error(data.error || 'Calculation failed');
        }

        // Update UI
        const resultsList = document.getElementById('resultsList');
        resultsList.innerHTML = '';
        
        document.getElementById('perPerson').textContent = data.amountPerPerson;
        
        data.balances.forEach((balance, index) => {
          const li = document.createElement('li');
          li.className = 'flex justify-between items-center bg-gray-50 p-3 rounded mb-2';
          
          if (balance.member === currentUser) {
            li.innerHTML = `
              <div class="flex-1">
                <span class="font-medium">You (${balance.member})</span>
                paid $${balance.amount.toFixed(2)}
              </div>
            `;
          } else {
            li.innerHTML = `
              <div class="flex-1">
                <span class="font-medium">${balance.member}</span> 
                owes $${balance.amount.toFixed(2)} to ${balance.owedTo}
              </div>
              <button class="mark-paid-btn bg-green-500 text-white px-3 py-1 rounded hover:bg-green-600"
                      data-index="${index}"
                      ${balance.amount === 0 ? 'disabled' : ''}>
                ${balance.amount === 0 ? '✓ Paid' : 'Mark Paid'}
              </button>
            `;
          }
          
          resultsList.appendChild(li);
        });
        document.getElementById('resultsSection').classList.remove('hidden');
      } catch (error) {
        alert(`Error: ${error.message}`);
        console.error('Calculation Error:', error);
      }
    });

    // Handle payment marking
    document.addEventListener('click', async (e) => {
      if (e.target.classList.contains('mark-paid-btn')) {
        const button = e.target;
        const index = button.dataset.index;
        
        try {
          const response = await fetch(`/mark-paid/${groupId}`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ memberIndex: index })
          });

          if (!response.ok) throw new Error('Payment update failed');

          button.disabled = true;
          button.textContent = '✓ Paid';
          button.classList.replace('bg-green-500', 'bg-gray-400');
        } catch (error) {
          alert(error.message);
        }
      }
    });
  </script>
</body>
</html>